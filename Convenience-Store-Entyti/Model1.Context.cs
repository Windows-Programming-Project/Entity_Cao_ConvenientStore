//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Convenience_Store_Entyti
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public partial class ConvenienceStoreManagementEntities1 : DbContext
    {
        public ConvenienceStoreManagementEntities1()
            : base("name=ConvenienceStoreManagementEntitie")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employee>()
         .HasMany(e => e.Shifts)
         .WithMany(e => e.Employees)
         .Map(m =>
         {
             m.ToTable("EmployeeShift"); // Specify the name of the join table
             m.MapLeftKey("eID"); // Specify the foreign key column for Employee
             m.MapRightKey("shID"); // Specify the foreign key column for Shift
         });
        }
        public virtual DbSet<EmployeeShift> EmployeeShifts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Invoice_Detail> Invoice_Detail { get; set; }
        public virtual DbSet<LoyalCustomer> LoyalCustomers { get; set; }
        public virtual DbSet<Manuafacturer> Manuafacturers { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Rank> Ranks { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<EmployeeLate> EmployeeLates { get; set; }
        public virtual DbSet<LeastFavoriteProduct> LeastFavoriteProducts { get; set; }
        public virtual DbSet<LoyalCustomerLeastProduct> LoyalCustomerLeastProducts { get; set; }
        public virtual DbSet<LoyalCustomerMostProduct> LoyalCustomerMostProducts { get; set; }
        public virtual DbSet<MostFavoriteProduct> MostFavoriteProducts { get; set; }

        [DbFunction("ConvenienceStoreManagementEntitie", "check_account_login")]
        public virtual IQueryable<check_account_login_Result> check_account_login(string username, string password, string role)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));

            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));

            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<check_account_login_Result>("[ConvenienceStoreManagementEntitie].[check_account_login](@username, @password, @role)", usernameParameter, passwordParameter, roleParameter);
        }

        [DbFunction("ConvenienceStoreManagementEntitie", "FN_AvailableProducts")]
        public virtual IQueryable<FN_AvailableProducts_Result> FN_AvailableProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_AvailableProducts_Result>("[ConvenienceStoreManagementEntitie].[FN_AvailableProducts]()");
        }

        [DbFunction("ConvenienceStoreManagementEntitie", "FN_TotalSalary")]
        public virtual IQueryable<FN_TotalSalary_Result> FN_TotalSalary(Nullable<System.DateTime> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_TotalSalary_Result>("[ConvenienceStoreManagementEntitie].[FN_TotalSalary](@month)", monthParameter);
        }

        public virtual ObjectResult<FindProductByTypeName_Result> FindProductByTypeName(string typeName)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindProductByTypeName_Result>("FindProductByTypeName", typeNameParameter);
        }

        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));

            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }

        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));

            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }

        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }

        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }

        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }

        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }

        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }

        public virtual ObjectResult<spud_HighestIncome_Result> spud_HighestIncome(Nullable<System.DateTime> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spud_HighestIncome_Result>("spud_HighestIncome", monthParameter);
        }

        public virtual ObjectResult<spud_MostDiligentEmployee_Result> spud_MostDiligentEmployee(Nullable<System.DateTime> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spud_MostDiligentEmployee_Result>("spud_MostDiligentEmployee", monthParameter);
        }
    }
}
